old pred pageit:
#if 0
static void pred_pageit(Pentry q[MAXPROCESSES], uint32_t tick) {
	//static int last_realloc = 0;
	int proc, page, state, evicted, allocated, i;
	struct phist_record ph_r;
	//int unsat[MAXPROCESSES]; /* if unsat[proc] >= 0, that proc wants page unsat[proc] */
	
	/*for(i = 0; i < MAXPROCESSES; i++)
		unsat[i] = -1;*/
		
	/*if(last_realloc == 0)
		last_realloc = 1;*/
		
	for(proc = 0; proc < MAXPROCESSES; proc++) {
		//if(!q[proc].active || proc_susp[proc]) /* done if its not active */
		if(!q[proc].active) /* done if its not active */
			continue;

		/*if(proc == 0) {
			phist_print_records(&phist_arr[proc]);
			fgetc(stdin);
		}*/
		
		page = q[proc].pc/PAGESIZE;
		/* note this time for future eviction decisions */
		timestamps[proc][page] = tick;

		/*if(tick - last_realloc >= REALLOC_INTERVAL ) {
			realloc_page_limits(q);
			last_realloc = tick;
		}*/
		
		ph_r.page = page;
		/* done if the page is already in memory */
		if(q[proc].pages[page]) {
			ph_r.fault = 0;
			phist_push(&phist_arr[proc], &ph_r);
			continue;
		}

		allocated = pages_alloc(q, proc);
		ph_r.fault = 1;
		phist_push(&phist_arr[proc], &ph_r);
		/* the page is not in memory.
		 * if pagein give 1 the page is either 
		 * on its way already or we just got it
		 * started, so we are done with this process
		 */
		state = SWAPFAIL; /* if we are at max alloc, the state is swap fail */
		//if( (allocated <= pg_alloc[proc]) && pagein(proc, page, &state) )
		if( pagein(proc, page, &state) )
			continue;

		/* either the page is swapping out or 
		 * there are no free physical pages
		 */
		if(state == SWAPOUT) 
			continue; /* just have to wait... */

		/* there are no free physical pages */
		if(allocated < 1)// || (tick - proc_last_evict[proc]) < 100) 
			continue; /* must have at least one page to evict and we dont evict more than once per 100 ticks */

		/* first: if there are processes out there with MORE
		 * allocated than is in their working set, they lose
		 * those pages
		 */
		/* find the working set of this process. */
		phist_working_set(&phist_arr[proc], proc_pset[proc], MAXPROCESSES);
		int faults;
		phist_fault_sum(&phist_arr[proc], &faults);
		/* if the working set is larger than the amount
		 * currently allocated to this process, suspend it.
		 * otherwise evict a page.
		 */		
		int pset_size = 0;
		for(i = 0; i < MAXPROCESSES; i++) {
			if(proc_pset[proc][i] == 1)
				pset_size++;
		}

		//if(pset_size > allocated)
		//if(faults < 1000)
		if(pset_size < allocated)
			printf("(%d) %d: %d > %d \t(%d/%d)\n", tick, proc, pset_size, allocated, faults, HSIZE);	
		lru_page(q, proc, tick, &evicted);

		if(!pageout(proc, evicted) ) {
			endit();
		}
		proc_last_evict[proc] = tick;
	}
}

#else






realloc stuff:
static void realloc_page_limits(Pentry q[MAXPROCESSES]) {
	int proc, faults, found_thrasher, page;
	//double freq;

	found_thrasher = 0;
	for(proc = 0; proc < MAXPROCESSES; proc++) {
		if(!q[proc].active || proc_susp[proc] > 0)
			continue;

		phist_fault_sum(&phist_arr[proc], &faults);
#define FAULT_X0 1
#define FAULT_X1 5
#define FAULT_X2 50
		if(faults <= FAULT_X0) {
			/* this process should give up a page */
			if(pg_alloc[proc] > 2)
				pg_alloc[proc]--;
		}
		else if(faults > FAULT_X0 && faults <= FAULT_X1) {
			/* current allocation is good... do nothing */
		}
		else if(pg_alloc[proc] < MAX_PAGE_ALLOC && faults > FAULT_X1 && faults <= FAULT_X2) {
			/* too many faults, lets increase the allocation
			 * for this process. */
			 pg_alloc[proc]++;
		}
		else if(found_thrasher == 0) {
			/* this process is thrashing, lets remove it from 
			 * the game and bring it back later when there
			 * is less demand
			 */
			proc_susp[proc] = tick;
			for(page = 0; page < MAXPROCPAGES; page++) {
				if(q[proc].pages[page])
					pageout(proc, page);
			}
			found_thrasher = 1; /* only remove one thrasher per check */
		}
	}
	
	if(found_thrasher == 0) {
		for(proc = 0; proc < MAXPROCESSES; proc++)
			if(proc_susp[proc]) {
				proc_susp[proc] = 0;
				break;
			}
	}
}